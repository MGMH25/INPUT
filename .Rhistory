d = merge (d, rd, by = "Region","Industry"))
# Primero cargar la libreria de EconGeo
library (EconGeo)
# Preguntar que es la Ventaja Comparativa Revelada (VCR)
?RCA
set.seed(31)
mat <- matrix(sample(0:100,20,replace=T), ncol = 4)
rownames(mat) <- c ("R1", "R2", "R3", "R4", "R5")
colnames(mat) <- c ("I1", "I2", "I3", "I4")
# Con los comandos anteriores se genera una matriz llamada mat
# Visualizar matriz creada que tiene regiones e industrias con una dimensión de 5X4
mat
dim(mat)
# Para sacar la VCR utilizar el siguiente comando
mat = RCA(mat, binary = T)
# Visualizar matriz binarizada
mat
# Recordar que la VCR es basicamente es un indicador de especializacion, produce mas de lo esperado basado en el tamano de la region y de la industria
# A partir de la matriz calcular las co-ocurrencias de la matriz transpuesta y visualizarla
c = co.occurrence(t(mat))
c
# Calcular el relacionamiento con base en las co-ocurrencias detectadas con anterioridad y visualizar resultado
r = relatedness(c)
r
r[r<1] = 0
r[r>1] = 1
r
# Una vez calculado el relacionamiento calcular la densidad del relacionamiento (en relacion a distancia- mas cercano o mas lejana)
# Asegurate que hayas computado la matriz binaria de VCR antes de computar el Relacionamiento-densidad
# Usar la matriz de VCR (mat) y la de espacio-producto (r) para calcular la densidad de relacionamiento. Visualizar ambas previamente
mat
r
# Con las dos matrices previas, calcular la densidad del relacionamiento y visualizar resultado
rd = relatedness.density(mat,r)
rd
# Convertir la matriz a una lista y visualizar resultado
rd = get.list(rd)
rd
# En CE se tiene la hipotesis que la densidad del relacionamiento es una variable explicativa para la entrada o no hacia una industria
# La entrada de una industria depende de la densidad del relacionamiento
# Por último vamos a predecir una entrada para ello ejecutar siguiente comando
?entry.list
set.seed(31)
mat1 <- matrix(sample(0:1,20,replace=T), ncol = 4)
rownames(mat1) <- c ("R1", "R2", "R3", "R4", "R5")
colnames(mat1) <- c ("I1", "I2", "I3", "I4")
mat1
mat2 <- mat1
mat2[3,1] <- 1
mat2
# Evidenciar las entradas con el siguiente comando y visualizar resultado
d = entry.list(mat1, mat2)
d
colnames(d) = c("Region","Industry","Entry","Period")
d = merge(d, rd, by = c("Region", "Industry"))
d
# Con estos resultado podemos hacer econometria incipiente como una regresion con el siguiente comando
# lm para referir a un modelo lineal con variable dependendiente Entry e independiente Count
# La entrada dependera de la densidad del relacionamiento
summary(lm(d$Entry ~ d$Count))
#ejecutar el procedimiento para el momento 3
mat3<-mat2
mat3[5,2]<-1
#visualizar la matriz de VCR en el momento 3
mat3
#Evidenicar la entrada de una industria a una región para los 3 momentos
d=entry.list(mat1,mat2,mat3)
head(d)
colnames(d) = c("Region","Industry","Entry","Period")
d = merge(d, rd, by = c("Region", "Industry"))
#visualizar la nueva lista de entrada con el dato de Count = DENSIDAD del Relacionamiento
head(d)
summary(lm(d$Entry ~ d$Count))
mat4<-mat3
mat4[5,4]<-1
mat4
d=entry.list(mat1,mat2,mat3,mat4)
#visualizar
head(d)
colnames(d) = c("Region","Industry","Entry","Period")
d = merge(d, rd, by = c("Region", "Industry"))
#visualizar la nueva lista
head(d)
#generar ecuación de regresión
summary(lm(d$Entry ~ d$Count))
separate(tasa, into = c("casos" , "población")
# Hecho con gusto por Carla Carolina Pérez Hernández (UAEH)
#Ejecutado por María Guadalupe Montiel Hernández
# LABORATORIO - Tidy data -datos ordenados- PARTE 1,2 y 3.
# Objetivo: Introducción práctica a los datos ordenados (o tidy data) y a las herramientas que provee el paquete tidyr.
# --------------------------------------------------------------------------------------------------------------------
# En este ejercicio vamos a:
# 1. Cargar datos (tibbles)
# 2. Converir nuestros tiblles en dataframes (para su exportación)
# 3. Exportar dataframes originales
# 4. Pivotar tabla 4a
# 5. Exportar resutltado (TABLA PIVOTANTE)
# 6. Separar y unir tablas
#############################################
#LABORATORIO: Tidy data (datos ordenados) 1 #
#############################################
#Prerrequisitos
#instalar paquete tidyverse
install.packages("tidyverse")
SEPARADO1 = tabla 3 %>%
SEPARADO1 = tabla3 %>%
separate(tasa, into = c("casos" , "población")
#PARTE 3
SEPARADO1 = tabla3 %>%
SEPARADO_1 = tabla3 %>%
separate(tasa, into = c("casos" , "poblacion")
SEPARADO_1 = tabla3 %>%
#Cargar paquete tidyverse
library(tidyverse)
#Cargar paquete de datos
library(datos)
SEPARADO_1 = tabla3 %>%
separate(tasa, into = c("casos" , "poblacion"))
View(SEPARADO_1)
#separación 2
#separar casos y población por carácter "/" "*" "-"
SEPARADO_2 = tabla3 %>%
separate(tasa, into = c("casos" , "poblacion"), sep = "/")
#separación 3
#separar siglo y año de la columna "anio"
SEPARADO_3 = tabla3 %>%
separate(anio, into = c("siglo" , "anio"), sep = 2)
#podemos unir usando unite() para unir las columnas siglo y anio creadas en el ejemplo anterior
UNION_1 = SEPARADO_3 %>%
unite(nueva, siglo, anio)
#En este caso también necesitamos el argumento sep. por defecto
# pondrá un guión bajo (_) entre los valores de las distintas columnas
# Si no queremos ningín separados usamos ("")
UNION_1 = SEPARADO_3 %>%
unite(nueva, siglo, anio, sep = "")
UNION_1 = SEPARADO_3 %>%
unite(nueva, siglo, anio)
UNION_2 = SEPARADO_3 %>%
unite(nueva, siglo, anio, sep = "")
View(UNION_2)
View(UNION_1)
View(mat3)
#exportar resultado
write.csv(UNION_2, file ="UNION_2.csv")
